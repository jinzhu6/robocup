#include "ros/ros.h"
#include <image_transport/image_transport.h>
#include <string.h>
/**
 * Optris device interface
 */
#include "PIImager.h"

/**
 * Optris image converter
 */
//#include "ImageBuilder.h"

#include <iostream>
using namespace std;
using namespace optris;

#define WIDTH    160
#define HEIGHT   120

unsigned short* _bufferThermal = NULL;
optris::PIImager* _imager;
//optris::ImageBuilder* _iBuilder;


void cbOnThermalFrame(unsigned short* image, unsigned int w, unsigned int h)
{
//    _iBuilder->setData(w, h, image);
    if(_bufferThermal==NULL)
      _bufferThermal = new unsigned short[w * h];
//    _iBuilder->convertTemperatureToPaletteImage(_bufferThermal);

    memcpy(_bufferThermal, image, w*h*sizeof(*image));

    static int frame = 0;
    if((frame++)%80==0)
    {
      cout << "Frame rate: " << _imager->getAverageFramerate() << " fps" << endl;
    }
}

int main (int argc, char* argv[])
{
  if(argc!=2)
  {
    cout << "usage: " << argv[0] << " <xml configuration file>" << endl;
    return -1;
  }

	ros::init (argc, argv, "thermal_image_raw_node1");

  // private node handle to support command line parameters for rosrun
        ros::NodeHandle n;
        image_transport::ImageTransport it(n);
	image_transport::Publisher  _pubThermal = it.advertise("thermal_image_raw1", 1);

  /**
   * Initialize Optris image processing chain
   */
  _imager = new PIImager(argv[1]);
  if(_imager->getWidth()==0 || _imager->getHeight()==0)
  {
    cout << "Error: Image streams not available or wrongly configured. Check connection of camera and config file." << endl;
    return -1;
  }

  cout << "Thermal channel: " << _imager->getWidth() << "x" << _imager->getHeight() << "@" << _imager->getFramerate() << "Hz" << endl;

  unsigned char* bufferRaw = new unsigned char[_imager->getRawBufferSize()];

  _imager->setFrameCallback(cbOnThermalFrame);

//  _iBuilder = new ImageBuilder();
//  _iBuilder->setPaletteScalingMethod(eMinMax);

  //_iBuilder->setPalette(eGrayBW);

//  _iBuilder->setManualTemperatureRange(25.0f, 40.0f);
  _imager->startStreaming();
  /**
   * Enter endless loop in order to pass raw data to Optris image processing library.
   * Processed data are supported by the frame callback function.
   */
	unsigned int   _frame = 0;
	sensor_msgs::Image img;
  	img.header.frame_id = "thermal_image_raw1";
  	img.height  = HEIGHT;
  	img.width   = WIDTH;
  	img.encoding        = "mono16";
  	img.step            = WIDTH*2;
  	img.data.resize(img.height*img.step);

   while(ros::ok())   
  {
    _imager->getFrame(bufferRaw);
    _imager->process(bufferRaw);

    if(_bufferThermal != NULL)
    {	    
        	if(_pubThermal.getNumSubscribers() == 0)
     			continue;
		img.header.seq      = ++_frame;
  		img.header.stamp    = ros::Time::now();
		memcpy(&img.data[0], _bufferThermal, 160*120*2);

		_pubThermal.publish(img);
    }	 
    usleep(16000);  //大概55hz

    _imager->releaseFrame();
  }

  delete [] bufferRaw;
  if(_bufferThermal) delete [] _bufferThermal;

  delete _imager;
//  delete _iBuilder;

  cout << "Exiting application" << endl;
}
