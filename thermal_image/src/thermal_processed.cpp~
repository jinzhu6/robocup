
#include "ros/ros.h"
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <sensor_msgs/image_encodings.h>
#include <vector>
#include "ImageBuilder.h"
using namespace optris;


image_transport::Publisher*  thermal_processed_pub;
double _min_tmp = 30;
double _max_tmp = 40;
optris::ImageBuilder     *iBuilder;
std::vector<cv::KeyPoint> keypoints;
/**
 * Callback function for receiving thermal data from thermal imager node
 * @param image      image containing raw temperature data
 */
void onRawDataReceive(const sensor_msgs::ImageConstPtr& image)
{
//static unsigned int frame = 0;

  unsigned short* data = (unsigned short*)&image->data[0];
  iBuilder->setData(image->width, image->height, data);

     cv::Mat cv_img_bin = cv::Mat::zeros(image->height, image->width, CV_8UC1);
unsigned char* p_cv_bin = cv_img_bin.data;
/*
  sensor_msgs::Image img_binary;
  img_binary.header.frame_id = "thermal_binary";
  img_binary.height 	       = image->height;
  img_binary.width 	       = image->width;
  img_binary.encoding        = "mono8";
  img_binary.step            = image->width;
  img_binary.data.resize(img_binary.height*img_binary.step);
  img_binary.header.seq      = ++frame;
  img_binary.header.stamp    = ros::Time::now();
*/
   for(unsigned int i=0; i<image->width*image->height; i++)
  {
         
	double temp = iBuilder->getTemperatureAt(i);
	//double temp = (float(data[i]) -900.0f)/10.0f;
        if(temp >= _min_tmp && temp <= _max_tmp) *p_cv_bin = 0xff;
//        else                  *p_cv_bin = 0x00;

	++p_cv_bin;
  }

cv::namedWindow("close");
cv::imshow("close", cv_img_bin);
//  thermal_processed_pub->publish(img_binary);

//const sensor_msgs::ImageConstPtr& binary_source =boost::shared_ptr<sensor_msgs::Image>(&img_binary);

//cv_bridge::CvImageConstPtr cv_ptr_bin;
//     cv_ptr_bin = cv_bridge::toCvCopy(image, sensor_msgs::image_encodings::MONO8);
//     cv::Mat cv_img_bin(cv_ptr_bin->image);

	
cv_bridge::CvImagePtr cv_ptr;
     cv_ptr = cv_bridge::toCvCopy(image, sensor_msgs::image_encodings::MONO16);
     cv::Mat img_processed(cv_ptr->image);

	cv::SimpleBlobDetector::Params params;
   params.filterByColor = true;
   params.blobColor = 255;
   params.minDistBetweenBlobs = 20;
   params.filterByArea = true;
   params.minArea = 10;
   params.maxArea = 160*120;
   params.filterByCircularity = false;

   params.filterByConvexity = false;
   params.filterByInertia = false;

   cv::SimpleBlobDetector blob_detector(params);

   keypoints.clear();

   blob_detector.detect(cv_img_bin,keypoints);
cv::drawKeypoints(img_processed, keypoints, img_processed, cv::Scalar(255, 0, 0), cv::DrawMatchesFlags::DRAW_OVER_OUTIMG);
/*
sensor_msgs::Image img_final;
  img_final.header.frame_id = "thermal_processed";
  img_final.height 	       = image->height;
  img_final.width 	       = image->width;
  img_final.encoding        = "mono16";
  img_final.step            = image->width;
  img_final.data.resize(img_final.height*img_final.step);
  img_final.header.seq      = ++frame;
  img_final.header.stamp    = ros::Time::now();
  
  img_final.data = img_processed.data;
*/

thermal_processed_pub->publish(cv_ptr->toImageMsg());

}



/**
 * Main routine of optris_binary_image_node.cpp
 * @param argc
 * @param argv
 * @return
 *
 * Usage:
 * rosrun optris_drivers optris_binary_image_node _threshold=20 _invert:=false
 */
int main (int argc, char* argv[])
{
  ros::init (argc, argv, "optris_binary_image_node");

  // private node handle to support command line parameters for rosrun
  ros::NodeHandle n_("~");

  // parameters for initialization
  n_.param("min_tmp", _min_tmp, 30.0);
  n_.param("max_tmp", _max_tmp, 40.0);
  iBuilder = new ImageBuilder();

  // init subscribers and publishers
  ros::NodeHandle n;
  image_transport::ImageTransport it(n);
  image_transport::Subscriber subThermal = it.subscribe("thermal_image_raw",  1, onRawDataReceive);
  image_transport::Publisher pubt        = it.advertise("thermal_processed", 1);
  thermal_processed_pub = &pubt;

  ros::Rate r(50);
while(ros::ok())
{
	ros::spinOnce();
	r.sleep();
}
  delete iBuilder;

}
